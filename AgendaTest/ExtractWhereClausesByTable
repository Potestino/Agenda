public Dictionary<string, List<string>> ExtractWhereClausesByTable(string sqlQuery)
{
    var result = new Dictionary<string, List<string>>();
    if (string.IsNullOrWhiteSpace(sqlQuery))
        return result;

    var decodedQuery = Uri.UnescapeDataString(sqlQuery.Replace("+", " "));

    // Find table name after FROM
    var fromMatch = Regex.Match(decodedQuery, @"FROM\s+([a-zA-Z0-9_\.]+)", RegexOptions.IgnoreCase);
    if (!fromMatch.Success)
        return result;

    string tableName = fromMatch.Groups[1].Value.Trim();

    // Find WHERE clause
    var whereMatch = Regex.Match(decodedQuery, @"\bWHERE\b(.*)", RegexOptions.IgnoreCase | RegexOptions.Singleline);
    if (!whereMatch.Success)
        return result;

    string whereClause = whereMatch.Groups[1].Value;
    whereClause = whereClause.Split(';')[0].Trim(); // Remove after ;

    var conditions = new List<string>();
    var buffer = new StringBuilder();
    int parenDepth = 0;
    bool inQuotes = false;

    for (int i = 0; i < whereClause.Length;)
    {
        char c = whereClause[i];

        if (c == '\'')
        {
            inQuotes = !inQuotes;
            buffer.Append(c);
            i++;
            continue;
        }

        if (!inQuotes)
        {
            if (c == '(') parenDepth++;
            else if (c == ')') parenDepth--;

            // Safe to split on AND
            if (parenDepth == 0 && i + 4 <= whereClause.Length &&
                whereClause.Substring(i, 4).ToUpperInvariant() == "AND ")
            {
                conditions.Add(buffer.ToString().Trim());
                buffer.Clear();
                i += 4;
                continue;
            }
        }

        buffer.Append(c);
        i++;
    }

    if (buffer.Length > 0)
        conditions.Add(buffer.ToString().Trim());

    result[tableName] = conditions;
    return result;
}
