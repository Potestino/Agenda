<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Spinner Calibrator v4 â€” Paste Center SVG Logo</title>
<style>
:root{
  --bg:#0b0b0c; --panel:#15171a; --muted:#9aa3b2;
  --purple:#6a1b9a; --blue:#3f66b6; --pink:#e23a8a; --e-blue:#0d4c8f;
}
*{box-sizing:border-box}
html,body{height:100%;margin:0;background:var(--bg);color:#eaeaea;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}
.layout{display:grid;grid-template-columns:minmax(520px,1fr) 520px;gap:16px;height:100%;padding:14px}
.stage{position:relative;display:grid;place-items:center;min-height:520px;background:#0f1013;border:1px solid #24262b;border-radius:14px;overflow:hidden}
#board{position:relative;width:520px;height:520px;background:#0f1013;border-radius:12px}
#bg{position:absolute;inset:0;object-fit:contain;opacity:.35;pointer-events:none}
/* Overlay SVG to preview pasted logo in the centre */
#overlay{position:absolute; inset:0; width:520px; height:520px; pointer-events:none}
.center{position:absolute;width:12px;height:12px;background:#fff;border-radius:50%;left:50%;top:50%;transform:translate(-50%,-50%);box-shadow:0 0 12px rgba(255,255,255,.7);cursor:grab}
.center:active,.sq:active{cursor:grabbing}
.sq{position:absolute;border-radius:12px;cursor:grab;box-shadow:0 4px 14px rgba(0,0,0,.35)}
#purpleLeft{background:var(--purple);width:64px;height:64px;border-radius:14px}
#blueTop{background:var(--blue);width:48px;height:48px;border-radius:12px}
#pinkTR{background:var(--pink);width:26px;height:26px;border-radius:8px}
#pinkBL{background:var(--pink);width:40px;height:40px;border-radius:10px}
#pinkBottom{background:var(--pink);width:30px;height:30px;border-radius:9px}

.panel{background:var(--panel);border:1px solid #24262b;border-radius:14px;padding:14px;display:grid;gap:12px;align-content:start}
.row{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
label{font-size:12px;color:var(--muted)}
.btn{background:#2b2f36;border:1px solid #3a3f48;border-radius:10px;color:#eaeaea;padding:10px 12px;font-weight:600;cursor:pointer}
.btn:hover{background:#343945}
.code{background:#0f1013;border:1px solid #24262b;border-radius:10px;padding:10px;white-space:pre-wrap;font-family:ui-monospace,Consolas,Menlo,monospace;font-size:12px;max-height:26vh;overflow:auto}
input[type="range"]{width:180px}
textarea{width:100%;min-height:120px;background:#0f1013;color:#eaeaea;border:1px solid #24262b;border-radius:10px;padding:10px;font-family:ui-monospace,Consolas,Menlo,monospace;font-size:12px}
small{color:var(--muted)}
</style>
</head>
<body>
<div class="layout">
  <div class="stage">
    <div id="board">
      <img id="bg" alt="frame"/>
      <!-- Overlay SVG for center-logo preview -->
      <svg id="overlay" viewBox="0 0 520 520">
        <g id="logoG" transform="translate(260 260) scale(1) translate(0 0)"></g>
      </svg>

      <div id="center" class="center" title="Drag to set orbit center"></div>
      <div id="blueTop" class="sq" title="blueTop"></div>
      <div id="pinkTR" class="sq" title="pinkTR"></div>
      <div id="purpleLeft" class="sq" title="purpleLeft"></div>
      <div id="pinkBL" class="sq" title="pinkBL"></div>
      <div id="pinkBottom" class="sq" title="pinkBottom"></div>
    </div>
  </div>

  <div class="panel">
    <div class="row">
      <label>Reference frame (optional):</label>
      <input id="file" type="file" accept="image/*">
      <span style="flex:1"></span>
      <button class="btn" id="reset">Reset</button>
      <button class="btn" id="export">Export Pure SVG Spinner</button>
    </div>

    <div class="row">
      <label>Ellipse Y (egg)</label>
      <input type="range" id="egg" min="0.7" max="1.6" step="0.01" value="1.00"><span id="eggVal">1.00</span>
      <label>Lap1</label><input id="lap1" type="number" value="2.4" step="0.1" style="width:70px">
      <label>Lap2</label><input id="lap2" type="number" value="0.8" step="0.1" style="width:70px">
      <label>Hold</label><input id="hold" type="number" value="0.35" step="0.05" style="width:70px">
      <label>Vanish@ (0..1)</label><input id="vanish" type="number" value="0.78" step="0.02" style="width:70px">
    </div>

    <div class="row">
      <label>Min scale</label><input id="smin" type="number" value="0.35" step="0.05" style="width:70px">
      <label>Max scale</label><input id="smax" type="number" value="1.00" step="0.05" style="width:70px">
    </div>

    <div class="row" style="align-items:flex-start">
      <div style="flex:1">
        <label>Center logo SVG markup (paste your `<g>...</g>` or `<path .../>` here)</label>
        <textarea id="logoMarkup"><text x="0" y="28" text-anchor="middle" font-size="72" font-weight="700" fill="#0d4c8f" font-family="Segoe UI, Roboto, Helvetica, Arial, sans-serif">e</text><circle cx="40" cy="35" r="3" fill="#a7bfd6"/></textarea>
      </div>
    </div>
    <div class="row">
      <label>Logo scale</label><input id="logoScale" type="number" value="1.0" step="0.05" style="width:80px">
      <label>Logo offset X</label><input id="logoDX" type="number" value="0" step="1" style="width:80px">
      <label>Logo offset Y</label><input id="logoDY" type="number" value="0" step="1" style="width:80px">
      <label>Logo rotation</label><input id="logoRot" type="number" value="0" step="1" style="width:80px">
    </div>

    <div class="row"><strong>Positions</strong></div>
    <pre id="pos" class="code"></pre>

    <div class="row"><strong>Exported HTML</strong></div>
    <pre id="out" class="code"></pre>
  </div>
</div>

<script>
const W=520,H=520, board=document.getElementById('board');
const center=document.getElementById('center');
const squares=[...document.querySelectorAll('.sq')];
const posEl=document.getElementById('pos'), outEl=document.getElementById('out');
const lap1=document.getElementById('lap1'),lap2=document.getElementById('lap2'),hold=document.getElementById('hold'),vanish=document.getElementById('vanish');
const egg=document.getElementById('egg'), eggVal=document.getElementById('eggVal');
const smin=document.getElementById('smin'), smax=document.getElementById('smax');
const logoMarkup=document.getElementById('logoMarkup');
const logoScale=document.getElementById('logoScale'), logoDX=document.getElementById('logoDX'), logoDY=document.getElementById('logoDY'), logoRot=document.getElementById('logoRot');
const logoG=document.getElementById('logoG');

function setPos(el,x,y){ el.style.left=(x-el.offsetWidth/2)+'px'; el.style.top=(y-el.offsetHeight/2)+'px'; el.dataset.x=x; el.dataset.y=y; readout(); updateLogo(); }
function getPos(el){ return {x:+(el.dataset.x||0), y:+(el.dataset.y||0)} }

function reset(){
  setPos(center,W/2,H/2); const cx=W/2, cy=H/2;
  setPos(document.getElementById('blueTop'),cx+35,cy-120);
  setPos(document.getElementById('pinkTR'),cx+95,cy-90);
  setPos(document.getElementById('purpleLeft'),cx-120,cy);
  setPos(document.getElementById('pinkBL'),cx-75,cy+55);
  setPos(document.getElementById('pinkBottom'),cx+10,cy+125);
  egg.value=1.0; eggVal.textContent=egg.value;
  logoScale.value=1.0; logoDX.value=0; logoDY.value=0; logoRot.value=0;
  updateLogo();
}
reset();

function drag(el){
  let d=false,ox=0,oy=0;
  el.addEventListener('pointerdown',e=>{d=true;el.setPointerCapture(e.pointerId);const r=el.getBoundingClientRect();ox=e.clientX-r.left;oy=e.clientY-r.top;});
  el.addEventListener('pointermove',e=>{if(!d)return;const b=board.getBoundingClientRect();let x=e.clientX-b.left-ox+el.offsetWidth/2,y=e.clientY-b.top-oy+el.offsetHeight/2;x=Math.max(0,Math.min(W,x));y=Math.max(0,Math.min(H,y));setPos(el,x,y);});
  el.addEventListener('pointerup',()=>d=false);
}
drag(center); squares.forEach(drag);

document.getElementById('file').addEventListener('change',e=>{const f=e.target.files[0];if(!f) return; document.getElementById('bg').src=URL.createObjectURL(f);});
document.getElementById('reset').onclick=reset; egg.oninput=()=>eggVal.textContent=egg.value;
[logoMarkup, logoScale, logoDX, logoDY, logoRot].forEach(el=>el.addEventListener('input', updateLogo));

function readout(){
  const c=getPos(center), data={center:c, squares:{}}; for(const s of squares){ data.squares[s.id]=getPos(s); } posEl.textContent=JSON.stringify(data,null,2);
}
readout();

function updateLogo(){
  const c=getPos(center);
  logoG.setAttribute('transform', `translate(${c.x} ${c.y}) rotate(${+logoRot.value}) translate(${+logoDX.value} ${+logoDY.value}) scale(${+logoScale.value})`);
  // set content
  logoG.innerHTML = logoMarkup.value;
}

function map(p){ const s=200/Math.max(W,H); return {x:p.x*s,y:p.y*s} }

function exportSVG(){
  const c=getPos(center), C=map(c);
  const cfg={lap1:+lap1.value,lap2:+lap2.value,hold:+hold.value, vanish:+vanish.value, egg:+egg.value, smin:+smin.value, smax:+smax.value};
  const logoCfg={scale:+logoScale.value, dx:+logoDX.value, dy:+logoDY.value, rot:+logoRot.value, markup:logoMarkup.value};

  const specs=[
    ["blueTop","#3f66b6",48,12],
    ["pinkTR","#e23a8a",26,8],
    ["purpleLeft","#6a1b9a",64,14],
    ["pinkBL","#e23a8a",40,10],
    ["pinkBottom","#e23a8a",30,9]
  ];

  const defs=[], items=[];
  const posData = JSON.parse(posEl.textContent);
  for(const [id,color,size,rx] of specs){
    const P=map(posData.squares[id]);
    const dx=P.x-C.x, dy=(P.y-C.y);
    const r = Math.hypot(dx,dy);
    const rxE=r, ryE=r*cfg.egg;
    const pathId=`orbit_${id}`;
    const P2={x:2*C.x-P.x, y:2*C.y-P.y};
    const phi=0;
    defs.push(`<path id="${pathId}" d="M ${P.x},${P.y} A ${rxE},${ryE} ${phi} 1 1 ${P2.x},${P2.y} A ${rxE},${ryE} ${phi} 1 1 ${P.x},${P.y}" fill="none"/>`);

    items.push(`
      <g id="${id}" opacity="0">
        <g transform="translate(-${size/2},-${size/2})"><rect width="${size}" height="${size}" rx="${rx}" ry="${rx}" fill="${color}"/></g>
        <animate attributeName="opacity" values="0;1" dur="0.2s" begin="0s; ${id}-fade.end+0.4s" fill="freeze"/>
        <animateMotion id="${id}-lap1" dur="${cfg.lap1}s" begin="0s; ${id}-lap2.end+0.4s" rotate="0" fill="freeze"><mpath xlink:href="#${pathId}"/></animateMotion>
        <animateMotion id="${id}-lap2" dur="${cfg.lap2}s" begin="${id}-lap1.end+${cfg.hold}s" rotate="0" keyTimes="0;1" calcMode="spline" keySplines=".4,0,1,1"><mpath xlink:href="#${pathId}"/></animateMotion>
        <animateTransform attributeName="transform" type="scale" values="${cfg.smin};${cfg.smax}" dur="${cfg.lap1}s" begin="0s; ${id}-fade.end+0.4s" fill="freeze"/>
        <animateTransform attributeName="transform" type="scale" values="${cfg.smax};${cfg.smin}" dur="${cfg.lap2}s" begin="${id}-lap1.end" fill="freeze"/>
        <animate id="${id}-fade" attributeName="opacity" values="1;0" dur="${Math.max(0.12, cfg.lap2*0.22)}s" begin="${id}-lap2.begin+${(cfg.vanish*cfg.lap2).toFixed(3)}s" fill="freeze"/>
      </g>
    `);
  }

  const svg = `<!doctype html>
<html lang="en"><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>5-Square Spinner â€” Export</title>
<style>html,body{height:100%;margin:0;background:#0b0b0c;display:grid;place-items:center}
svg{width:min(420px,90vw);height:auto;display:block;filter:drop-shadow(0 10px 30px rgba(0,0,0,.55))}</style>
</head><body>
<svg viewBox="0 0 200 200" role="img" aria-label="Loading">
  <defs>${defs.join("\n")}</defs>
  <g transform="translate(${C.x} ${C.y}) rotate(${logoCfg.rot}) translate(${logoCfg.dx*200/520} ${logoCfg.dy*200/520}) scale(${logoCfg.scale*200/520})">
    ${logoCfg.markup}
  </g>
  ${items.join("\n")}
</svg>
</body></html>`;
  outEl.textContent = svg;
}

document.getElementById('export').onclick = exportSVG;
updateLogo();
</script>
</body>
</html>
